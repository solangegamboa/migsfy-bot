#!/usr/bin/env python3

import os
import sys
import re
import asyncio
import logging
import time
from datetime import datetime
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
    TELEGRAM_AVAILABLE = True
    print("‚úÖ python-telegram-bot dispon√≠vel")
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("‚ùå python-telegram-bot n√£o encontrado")
    print("üí° Instale com: pip install python-telegram-bot")
    sys.exit(1)

# Importa fun√ß√µes do script principal
try:
    # Tenta importar do m√≥dulo CLI
    import sys
    import os
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'cli'))
    
    from main import (
        connectToSlskd, 
        smart_mp3_search,
        smart_album_search,
        setup_spotify_client, 
        setup_spotify_user_client,
        extract_playlist_id, 
        get_playlist_tracks_with_uris,
        download_playlist_tracks_with_removal,
        download_playlist_tracks,
        show_download_history,
        clear_download_history
    )
except ImportError:
    # Fallback para importa√ß√£o direta do arquivo
    try:
        from slskd_mp3_search import (
            connectToSlskd, 
            smart_mp3_search,
            smart_album_search,
            setup_spotify_client, 
            setup_spotify_user_client,
            extract_playlist_id, 
            get_playlist_tracks_with_uris,
            download_playlist_tracks_with_removal,
            download_playlist_tracks,
            show_download_history,
            clear_download_history
        )
    except ImportError:
        # Se n√£o conseguir importar como m√≥dulo, importa como script
        import sys
        import importlib.util
        
        # Tenta o novo caminho primeiro
        main_path = os.path.join(os.path.dirname(__file__), '..', 'cli', 'main.py')
        if os.path.exists(main_path):
            spec = importlib.util.spec_from_file_location("main", main_path)
        else:
            # Fallback para o caminho antigo
            spec = importlib.util.spec_from_file_location("slskd_mp3_search", "slskd-mp3-search.py")
        
        slskd_module = importlib.util.module_from_spec(spec)
        sys.modules["slskd_mp3_search"] = slskd_module
        spec.loader.exec_module(slskd_module)
        
        # Importa as fun√ß√µes necess√°rias
    connectToSlskd = slskd_module.connectToSlskd
    smart_mp3_search = slskd_module.smart_mp3_search
    smart_album_search = slskd_module.smart_album_search
    setup_spotify_client = slskd_module.setup_spotify_client
    setup_spotify_user_client = slskd_module.setup_spotify_user_client
    extract_playlist_id = slskd_module.extract_playlist_id
    get_playlist_tracks_with_uris = slskd_module.get_playlist_tracks_with_uris
    download_playlist_tracks_with_removal = slskd_module.download_playlist_tracks_with_removal
    download_playlist_tracks = slskd_module.download_playlist_tracks
    show_download_history = slskd_module.show_download_history
    clear_download_history = slskd_module.clear_download_history

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('telegram_bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# Reduz logs verbosos do httpx
logging.getLogger("httpx").setLevel(logging.WARNING)

class TelegramMusicBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.allowed_users = self._get_allowed_users()
        self.allowed_groups = self._get_allowed_groups()
        self.allowed_threads = self._get_allowed_threads()
        self.slskd = None
        self.spotify_client = None
        self.spotify_user_client = None
        
        # Sistema de controle de tarefas ativas
        self.active_tasks = {}  # {task_id: {'task': asyncio.Task, 'type': str, 'user_id': int, 'chat_id': int}}
        self.task_counter = 0
        
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN n√£o encontrado no .env")
        
        # Conecta aos servi√ßos
        self._connect_services()
    
    def _get_allowed_users(self):
        """Obt√©m lista de usu√°rios autorizados"""
        users_str = os.getenv('TELEGRAM_ALLOWED_USERS', '')
        if users_str:
            return [int(user_id.strip()) for user_id in users_str.split(',') if user_id.strip()]
        return []
    
    def _get_allowed_groups(self):
        """Obt√©m lista de grupos autorizados"""
        groups_str = os.getenv('TELEGRAM_ALLOWED_GROUPS', '')
        if groups_str:
            return [int(group_id.strip()) for group_id in groups_str.split(',') if group_id.strip()]
        return []
    
    def _get_allowed_threads(self):
        """Obt√©m dicion√°rio de threads permitidas por grupo"""
        threads_str = os.getenv('TELEGRAM_ALLOWED_THREADS', '')
        threads_dict = {}
        
        if threads_str:
            # Formato: group_id:thread_id,group_id:thread_id
            for thread_config in threads_str.split(','):
                if ':' in thread_config:
                    try:
                        group_id, thread_id = thread_config.strip().split(':', 1)
                        group_id = int(group_id)
                        thread_id = int(thread_id)
                        
                        if group_id not in threads_dict:
                            threads_dict[group_id] = []
                        threads_dict[group_id].append(thread_id)
                    except ValueError:
                        logger.warning(f"Formato inv√°lido para thread: {thread_config}")
        
        return threads_dict
    
    def _connect_services(self):
        """Conecta aos servi√ßos externos"""
        try:
            self.slskd = connectToSlskd()
            if self.slskd:
                logger.info("‚úÖ Conectado ao slskd")
            else:
                logger.error("‚ùå Falha ao conectar ao slskd")
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar ao slskd: {e}")
        
        try:
            self.spotify_client = setup_spotify_client()
            if self.spotify_client:
                logger.info("‚úÖ Cliente Spotify configurado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar Spotify: {e}")
    
    def _create_task_id(self) -> str:
        """Cria um ID √∫nico para a tarefa"""
        self.task_counter += 1
        return f"task_{self.task_counter}"
    
    def _register_task(self, task: asyncio.Task, task_type: str, user_id: int, chat_id: int) -> str:
        """Registra uma tarefa ativa"""
        task_id = self._create_task_id()
        self.active_tasks[task_id] = {
            'task': task,
            'type': task_type,
            'user_id': user_id,
            'chat_id': chat_id,
            'created_at': datetime.now()
        }
        logger.info(f"Tarefa registrada: {task_id} ({task_type}) para usu√°rio {user_id}")
        return task_id
    
    def _unregister_task(self, task_id: str):
        """Remove uma tarefa do registro"""
        if task_id in self.active_tasks:
            del self.active_tasks[task_id]
            logger.info(f"Tarefa removida: {task_id}")
    
    def _cancel_task(self, task_id: str) -> bool:
        """Cancela uma tarefa espec√≠fica"""
        if task_id in self.active_tasks:
            task_info = self.active_tasks[task_id]
            task = task_info['task']
            
            if not task.done():
                task.cancel()
                logger.info(f"Tarefa cancelada: {task_id} ({task_info['type']})")
                self._unregister_task(task_id)
                return True
            else:
                self._unregister_task(task_id)
                return False
        return False
    
    def _get_user_tasks(self, user_id: int, chat_id: int) -> list:
        """Obt√©m tarefas ativas de um usu√°rio em um chat espec√≠fico"""
        user_tasks = []
        for task_id, task_info in self.active_tasks.items():
            if task_info['user_id'] == user_id and task_info['chat_id'] == chat_id:
                if not task_info['task'].done():
                    user_tasks.append((task_id, task_info))
                else:
                    # Remove tarefas conclu√≠das automaticamente
                    self._unregister_task(task_id)
        return user_tasks
    
    def _create_cancel_keyboard(self, task_id: str) -> InlineKeyboardMarkup:
        """Cria teclado inline com bot√£o de cancelar"""
        keyboard = [
            [InlineKeyboardButton("üõë Cancelar Busca", callback_data=f"cancel_{task_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def _is_authorized(self, update: Update) -> bool:
        """Verifica se usu√°rio/grupo/thread est√° autorizado"""
        user_id = update.effective_user.id
        chat = update.effective_chat
        
        # Log para debug
        logger.info(f"Verificando autoriza√ß√£o - User: {user_id}, Chat: {chat.id}, Type: {chat.type}")
        
        # Se √© chat privado, verifica usu√°rios permitidos
        if chat.type == 'private':
            if not self.allowed_users:
                return True  # Se n√£o h√° lista, permite todos em privado
            return user_id in self.allowed_users
        
        # Se √© grupo/supergrupo
        elif chat.type in ['group', 'supergroup']:
            # Verifica se o grupo est√° na lista de grupos permitidos
            if self.allowed_groups and chat.id not in self.allowed_groups:
                logger.info(f"Grupo {chat.id} n√£o est√° na lista de grupos permitidos")
                return False
            
            # Se h√° configura√ß√£o de threads espec√≠ficas para este grupo
            if chat.id in self.allowed_threads:
                message_thread_id = getattr(update.message, 'message_thread_id', None)
                
                # Log para debug
                logger.info(f"Thread ID da mensagem: {message_thread_id}")
                logger.info(f"Threads permitidas para grupo {chat.id}: {self.allowed_threads[chat.id]}")
                
                # Se a mensagem n√£o tem thread_id (mensagem no grupo principal)
                if message_thread_id is None:
                    logger.info("Mensagem no grupo principal - negando acesso")
                    return False
                
                # Verifica se a thread est√° permitida
                if message_thread_id not in self.allowed_threads[chat.id]:
                    logger.info(f"Thread {message_thread_id} n√£o est√° permitida")
                    return False
                
                logger.info(f"Thread {message_thread_id} est√° permitida")
                return True
            
            # Se n√£o h√° configura√ß√£o espec√≠fica de threads, permite o grupo todo
            elif self.allowed_groups and chat.id in self.allowed_groups:
                return True
            
            # Se n√£o h√° configura√ß√£o de grupos, nega acesso
            logger.info("Grupo n√£o configurado - negando acesso")
            return False
        
        # Outros tipos de chat n√£o s√£o suportados
        logger.info(f"Tipo de chat n√£o suportado: {chat.type}")
        return False
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        if not self._is_authorized(update):
            await update.message.reply_text("‚ùå Voc√™ n√£o tem permiss√£o para usar este bot neste local.")
            return
        
        welcome_text = """
üéµ **SLSKD Music Bot**

Bem-vindo! Este bot permite buscar e baixar m√∫sicas usando slskd e Spotify.

**Comandos dispon√≠veis:**
/help - Mostra ajuda completa
/search <termo> - Busca uma m√∫sica
/album <artista - √°lbum> - Busca √°lbum completo
/spotify <url> - Baixa playlist do Spotify
/tasks - Ver e cancelar tarefas ativas
/history - Mostra hist√≥rico de downloads
/status - Status dos servi√ßos

**Exemplos:**
`/search Radiohead - Creep`
`/album Pink Floyd - The Dark Side of the Moon`
`/spotify https://open.spotify.com/playlist/...`

üõë **Novo:** Todas as buscas agora podem ser canceladas! Use os bot√µes que aparecem ou `/tasks` para gerenciar.

üí° Use `/help` para ver todos os comandos e op√ß√µes dispon√≠veis.
        """
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /help"""
        if not self._is_authorized(update):
            return
        
        help_text = """
üéµ **Comandos do Bot**

**Busca de M√∫sica:**
`/search <termo>` - Busca espec√≠fica
Exemplo: `/search Linkin Park - In the End`

**Busca de √Ålbum:**
`/album <artista - √°lbum>` - Busca √°lbum completo
üÜï **Novo:** Mostra os 5 melhores √°lbuns encontrados para voc√™ escolher!
Exemplo: `/album Pink Floyd - The Dark Side of the Moon`

**Spotify:**
`/spotify <url>` - Baixa playlist
`/spotify <url> limit=10` - Limita downloads
`/spotify <url> remove=yes` - Remove da playlist

**Last.fm:**
`/lastfm_tag <tag>` - Baixa automaticamente as 25 m√∫sicas mais populares de uma tag
`/lastfm_tag <tag> <n√∫mero>` - Especifica quantidade de m√∫sicas (m√°x: 100)
`/lastfm_artist <artista>` - Baixa automaticamente as 30 m√∫sicas mais populares de um artista
`/lastfm_artist <artista> <n√∫mero>` - Especifica quantidade de m√∫sicas (m√°x: 50)
Exemplos:
‚Ä¢ `/lastfm_tag rock alternativo` - 25 m√∫sicas mais populares (autom√°tico)
‚Ä¢ `/lastfm_tag jazz 50` - 50 m√∫sicas mais populares (autom√°tico)
‚Ä¢ `/lastfm_artist Radiohead` - 30 m√∫sicas mais populares (autom√°tico)
‚Ä¢ `/lastfm_artist The Beatles 20` - 20 m√∫sicas mais populares (autom√°tico)
_Obs: M√∫sicas j√° baixadas anteriormente ser√£o puladas. Processo totalmente autom√°tico - n√£o pergunta nada!_

**Hist√≥rico:**
`/history` - Ver downloads
`/clear_history` - Limpar hist√≥rico

**Controle de Tarefas:**
`/tasks` - Ver tarefas ativas e cancelar

**Sistema:**
`/status` - Status dos servi√ßos
`/info` - Informa√ß√µes do chat atual
`/help` - Esta ajuda

**Exemplos completos:**
`/search Radiohead - Creep`
`/album Beatles - Abbey Road`
`/spotify https://open.spotify.com/playlist/37i9dQZF1DXcBWIGoYBM5M`
`/spotify https://spotify.com/playlist/ID limit=5 remove=yes`

üí° **Cancelamento:** Todas as buscas e downloads mostram um bot√£o üõë para cancelar. Use `/tasks` para ver todas as tarefas ativas.

üÜï **Sele√ß√£o de √Ålbuns:** Ao buscar √°lbuns, voc√™ ver√° uma lista com os melhores matches encontrados, incluindo n√∫mero de faixas, qualidade e tamanho. Clique no bot√£o do √°lbum desejado para iniciar o download!
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /status"""
        if not self._is_authorized(update):
            return
        
        status_text = "üîç **Status dos Servi√ßos**\n\n"
        
        # Status slskd
        if self.slskd:
            status_text += "‚úÖ SLSKD: Conectado\n"
        else:
            status_text += "‚ùå SLSKD: Desconectado\n"
        
        # Status Spotify
        if self.spotify_client:
            status_text += "‚úÖ Spotify: Configurado\n"
        else:
            status_text += "‚ùå Spotify: N√£o configurado\n"
        
        # Informa√ß√µes do sistema
        status_text += f"\nüìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /search"""
        if not self._is_authorized(update):
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå Use: /search <termo de busca>")
            return
        
        search_term = ' '.join(context.args)
        await self._handle_music_search(update, search_term)
    
    async def album_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /album"""
        if not self._is_authorized(update):
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå Use: /album <artista - √°lbum>\n\nExemplos:\n‚Ä¢ `/album Pink Floyd - The Dark Side of the Moon`\n‚Ä¢ `/album Beatles - Abbey Road`\n‚Ä¢ `/album Nirvana - Nevermind`", parse_mode='Markdown')
            return
        
        album_query = ' '.join(context.args)
        await self._handle_album_search(update, album_query)
    
    async def spotify_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /spotify"""
        if not self._is_authorized(update):
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå Use: /spotify <url> [op√ß√µes]\n\nExemplo: `/spotify https://open.spotify.com/playlist/ID`", parse_mode='Markdown')
            return
        
        playlist_url = context.args[0]
        
        # Processa op√ß√µes
        options = {}
        for arg in context.args[1:]:
            if '=' in arg:
                key, value = arg.split('=', 1)
                options[key.lower()] = value.lower()
        
        await self._handle_playlist_download(update, playlist_url, options)
        
    async def lastfm_tag_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /lastfm_tag para baixar m√∫sicas populares de uma tag do Last.fm"""
        if not self._is_authorized(update):
            return
        
        # Verificar se h√° argumentos
        if not context.args:
            await update.message.reply_text(
                "‚ùå **Comando Incompleto**\n\n"
                "**Uso do comando:**\n"
                "`/lastfm_tag <tag>` - Baixa automaticamente as 25 m√∫sicas mais populares\n"
                "`/lastfm_tag <tag> <n√∫mero>` - Especifica quantidade (m√°x: 100)\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/lastfm_tag rock alternativo` - 25 m√∫sicas mais populares (autom√°tico)\n"
                "‚Ä¢ `/lastfm_tag jazz 50` - 50 m√∫sicas mais populares (autom√°tico)\n\n"
                "**Tags populares:** rock, pop, jazz, metal, indie, electronic, hip-hop, classical\n\n"
                "ü§ñ **Processo autom√°tico:** As primeiras m√∫sicas que n√£o est√£o no seu hist√≥rico ser√£o baixadas diretamente, sem perguntar nada!",
                parse_mode='Markdown'
            )
            return
        
        # Verificar se o √∫ltimo argumento √© um n√∫mero (quantidade de m√∫sicas)
        limit = 25  # Valor padr√£o
        tag_parts = context.args.copy()
        
        if tag_parts and tag_parts[-1].isdigit():
            limit = int(tag_parts.pop())
            if limit > 100:
                await update.message.reply_text(
                    "‚ö†Ô∏è O limite m√°ximo √© de 100 m√∫sicas por vez para evitar sobrecarregar o servidor.\n"
                    "Usando 100 como limite. Para baixar mais m√∫sicas, execute o comando novamente ap√≥s o t√©rmino.",
                    parse_mode='Markdown'
                )
                limit = 100
        
        # Juntar os argumentos restantes para formar a tag
        tag_name = " ".join(tag_parts)
        
        # Informar ao usu√°rio que o processo come√ßou
        status_message = await update.message.reply_text(
            f"üîç **Iniciando download autom√°tico da tag \"{tag_name}\"**\n\n"
            f"‚Ä¢ Quantidade solicitada: *{limit}* m√∫sicas\n"
            f"‚Ä¢ M√∫sicas j√° baixadas anteriormente ser√£o puladas automaticamente\n"
            f"‚Ä¢ As primeiras {limit} m√∫sicas mais populares que n√£o tenho ser√£o baixadas diretamente\n"
            f"‚Ä¢ **N√£o ser√° perguntado nada - processo totalmente autom√°tico**\n\n"
            f"_Este processo pode levar alguns minutos. Por favor, aguarde..._",
            parse_mode='Markdown'
        )
        
        # Criar uma tarefa ass√≠ncrona para o download
        self.task_counter += 1
        task_id = f"lastfm_tag_{self.task_counter}"
        
        # Executar o download em uma thread separada
        task = asyncio.create_task(self._download_lastfm_tag(update, tag_name, limit, task_id, status_message))
        
        # Adicionar √† lista de tarefas ativas
        self.active_tasks[task_id] = {
            'task': task,
            'type': 'lastfm_tag',
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'description': f"Download de m√∫sicas da tag '{tag_name}' do Last.fm",
            'start_time': datetime.now(),
            'status_message': status_message
        }
    
    async def _download_lastfm_tag(self, update, tag_name, limit, task_id, status_message):
        """Fun√ß√£o ass√≠ncrona para baixar m√∫sicas de uma tag do Last.fm"""
        try:
            # Importar o m√≥dulo Last.fm usando o caminho correto
            import sys
            import os
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
            from core.lastfm.tag_downloader import download_tracks_by_tag
            
            # Atualizar mensagem de status
            await status_message.edit_text(
                f"‚è≥ **Download iniciado: Tag \"{tag_name}\"**\n\n"
                f"‚Ä¢ Buscando as {limit} m√∫sicas mais populares\n"
                f"‚Ä¢ Verificando hist√≥rico de downloads\n"
                f"‚Ä¢ Baixando automaticamente as primeiras {limit} que n√£o tenho\n\n"
                f"_O progresso ser√° atualizado ao finalizar. Por favor, aguarde..._",
                parse_mode='Markdown'
            )
            
            # Executar o download em uma thread separada para n√£o bloquear o bot
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None, 
                lambda: download_tracks_by_tag(tag_name, limit=limit, skip_existing=True)
            )
            
            # Verificar se houve falha na autentica√ß√£o
            if result is None:
                await status_message.edit_text(
                    f"‚ùå **Falha na autentica√ß√£o do Last.fm**\n\n"
                    f"N√£o foi poss√≠vel conectar √† API do Last.fm.\n\n"
                    f"**Poss√≠veis causas:**\n"
                    f"‚Ä¢ Credenciais n√£o configuradas no servidor\n"
                    f"‚Ä¢ API Key ou Secret inv√°lidos\n"
                    f"‚Ä¢ Problema de conectividade\n\n"
                    f"Entre em contato com o administrador do bot.",
                    parse_mode='Markdown'
                )
                return
            
            total, successful, failed, skipped = result
            
            # Atualizar status da tarefa
            if task_id in self.active_tasks:
                self.active_tasks[task_id]['status'] = 'completed'
                self.active_tasks[task_id]['end_time'] = datetime.now()
            
            # Calcular tempo decorrido
            start_time = self.active_tasks[task_id]['start_time'] if task_id in self.active_tasks else datetime.now()
            end_time = self.active_tasks[task_id]['end_time'] if task_id in self.active_tasks else datetime.now()
            elapsed_time = end_time - start_time
            elapsed_str = str(elapsed_time).split('.')[0]  # Remover microssegundos
            
            # Enviar mensagem de conclus√£o
            if total == 0:
                await status_message.edit_text(
                    f"‚ùå **Nenhuma m√∫sica encontrada**\n\n"
                    f"N√£o foi poss√≠vel encontrar m√∫sicas para a tag *{tag_name}*.\n\n"
                    f"Sugest√µes:\n"
                    f"‚Ä¢ Verifique se o nome da tag est√° correto\n"
                    f"‚Ä¢ Tente uma tag mais popular (rock, pop, jazz, etc.)\n"
                    f"‚Ä¢ Tente uma varia√ß√£o da tag (ex: 'rock' em vez de 'rock alternativo')",
                    parse_mode='Markdown'
                )
            else:
                # Calcular porcentagem de sucesso
                success_rate = (successful / (total - skipped)) * 100 if total > skipped else 0
                
                # Criar mensagem de status personalizada
                if successful == 0 and skipped > 0:
                    status_emoji = "‚ÑπÔ∏è"
                    status_text = "Todas as m√∫sicas j√° estavam baixadas"
                elif successful == 0 and failed > 0:
                    status_emoji = "‚ùå"
                    status_text = "N√£o foi poss√≠vel baixar nenhuma m√∫sica"
                elif success_rate >= 80:
                    status_emoji = "‚úÖ"
                    status_text = "Download autom√°tico conclu√≠do com sucesso"
                elif success_rate >= 50:
                    status_emoji = "‚ö†Ô∏è"
                    status_text = "Download autom√°tico parcialmente conclu√≠do"
                else:
                    status_emoji = "‚ö†Ô∏è"
                    status_text = "Download autom√°tico com muitas falhas"
                
                await status_message.edit_text(
                    f"{status_emoji} **{status_text}**\n\n"
                    f"**Tag:** {tag_name}\n"
                    f"**Tempo:** {elapsed_str}\n\n"
                    f"üìä **Estat√≠sticas:**\n"
                    f"‚Ä¢ Total de m√∫sicas encontradas: {total}\n"
                    f"‚Ä¢ Downloads iniciados automaticamente: {successful}\n"
                    f"‚Ä¢ Downloads com falha: {failed}\n"
                    f"‚Ä¢ M√∫sicas puladas (j√° baixadas): {skipped}\n"
                    f"‚Ä¢ Taxa de sucesso: {success_rate:.1f}%\n\n"
                    f"‚úÖ **Processo autom√°tico:** As primeiras {limit} m√∫sicas mais populares que n√£o estavam no hist√≥rico foram baixadas automaticamente, sem perguntar.\n\n"
                    f"_Use /history para ver o hist√≥rico completo de downloads_",
                    parse_mode='Markdown'
                )
        
        except Exception as e:
            logger.error(f"Erro ao baixar m√∫sicas da tag '{tag_name}': {e}")
            
            # Atualizar status da tarefa
            if task_id in self.active_tasks:
                self.active_tasks[task_id]['status'] = 'failed'
                self.active_tasks[task_id]['end_time'] = datetime.now()
                self.active_tasks[task_id]['error'] = str(e)
            
            # Enviar mensagem de erro
            await status_message.edit_text(
                f"‚ùå **Erro ao processar a tag \"{tag_name}\"**\n\n"
                f"Ocorreu um erro durante o download das m√∫sicas:\n"
                f"`{str(e)}`\n\n"
                f"**Poss√≠veis solu√ß√µes:**\n"
                f"‚Ä¢ Verifique se as credenciais do Last.fm est√£o configuradas\n"
                f"‚Ä¢ Verifique se o servidor SLSKD est√° online\n"
                f"‚Ä¢ Tente novamente mais tarde\n"
                f"‚Ä¢ Tente com uma tag diferente",
                parse_mode='Markdown'
            )
    
    async def lastfm_artist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /lastfm_artist para baixar as 30 m√∫sicas mais populares de um artista do Last.fm"""
        if not self._is_authorized(update):
            return
        
        # Verificar se h√° argumentos
        if not context.args:
            await update.message.reply_text(
                "‚ùå **Comando Incompleto**\n\n"
                "**Uso do comando:**\n"
                "`/lastfm_artist <nome_do_artista>` - Baixa automaticamente as 30 m√∫sicas mais populares\n"
                "`/lastfm_artist <nome_do_artista> <n√∫mero>` - Especifica quantidade (m√°x: 50)\n\n"
                "**Exemplos:**\n"
                "‚Ä¢ `/lastfm_artist Radiohead` - 30 m√∫sicas mais populares (autom√°tico)\n"
                "‚Ä¢ `/lastfm_artist The Beatles 20` - 20 m√∫sicas mais populares (autom√°tico)\n"
                "‚Ä¢ `/lastfm_artist Pink Floyd 50` - 50 m√∫sicas mais populares (autom√°tico)\n\n"
                "ü§ñ **Processo autom√°tico:** As primeiras m√∫sicas que n√£o est√£o no seu hist√≥rico ser√£o baixadas diretamente, sem perguntar nada!",
                parse_mode='Markdown'
            )
            return
        
        # Verificar se o √∫ltimo argumento √© um n√∫mero (quantidade de m√∫sicas)
        limit = 30  # Valor padr√£o
        artist_parts = context.args.copy()
        
        if artist_parts and artist_parts[-1].isdigit():
            limit = int(artist_parts.pop())
            if limit > 50:
                await update.message.reply_text(
                    "‚ö†Ô∏è O limite m√°ximo √© de 50 m√∫sicas por vez para evitar sobrecarregar o servidor.\n"
                    "Usando 50 como limite. Para baixar mais m√∫sicas, execute o comando novamente ap√≥s o t√©rmino.",
                    parse_mode='Markdown'
                )
                limit = 50
        
        # Juntar os argumentos restantes para formar o nome do artista
        artist_name = " ".join(artist_parts)
        
        # Informar ao usu√°rio que o processo come√ßou
        status_message = await update.message.reply_text(
            f"üé§ **Iniciando download autom√°tico do artista \"{artist_name}\"**\n\n"
            f"‚Ä¢ Quantidade solicitada: *{limit}* m√∫sicas\n"
            f"‚Ä¢ M√∫sicas j√° baixadas anteriormente ser√£o puladas automaticamente\n"
            f"‚Ä¢ As primeiras {limit} m√∫sicas mais populares que n√£o tenho ser√£o baixadas diretamente\n"
            f"‚Ä¢ **N√£o ser√° perguntado nada - processo totalmente autom√°tico**\n\n"
            f"_Este processo pode levar alguns minutos. Por favor, aguarde..._",
            parse_mode='Markdown'
        )
        
        # Criar uma tarefa ass√≠ncrona para o download
        self.task_counter += 1
        task_id = f"lastfm_artist_{self.task_counter}"
        
        # Adicionar tarefa √† lista de tarefas ativas
        user_id = update.effective_user.id
        if user_id not in self.active_tasks:
            self.active_tasks[user_id] = {}
        
        self.active_tasks[user_id][task_id] = {
            'type': 'lastfm_artist',
            'artist': artist_name,
            'limit': limit,
            'status': 'iniciando',
            'start_time': time.time(),
            'message_id': status_message.message_id
        }
        
        # Executar download em background
        asyncio.create_task(self._handle_lastfm_artist_download(update, artist_name, limit, task_id))
    
    async def _handle_lastfm_artist_download(self, update: Update, artist_name: str, limit: int, task_id: str):
        """Processa o download das top tracks de um artista do Last.fm em background"""
        user_id = update.effective_user.id
        
        try:
            # Atualizar status da tarefa
            if user_id in self.active_tasks and task_id in self.active_tasks[user_id]:
                self.active_tasks[user_id][task_id]['status'] = 'baixando'
            
            # Importar fun√ß√£o de download do Last.fm
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'core', 'lastfm'))
            from tag_downloader import download_artist_top_tracks
            
            # Executar download
            result = download_artist_top_tracks(artist_name, limit=limit, skip_existing=True)
            
            # Remover tarefa da lista de ativas
            if user_id in self.active_tasks and task_id in self.active_tasks[user_id]:
                del self.active_tasks[user_id][task_id]
            
            if result is None:
                await update.message.reply_text(
                    f"‚ùå **Erro no download do artista \"{artist_name}\"**\n\n"
                    f"**Poss√≠veis causas:**\n"
                    f"‚Ä¢ Artista n√£o encontrado no Last.fm\n"
                    f"‚Ä¢ Credenciais do Last.fm n√£o configuradas\n"
                    f"‚Ä¢ Servidor SLSKD offline\n"
                    f"‚Ä¢ Problema de conectividade\n\n"
                    f"**Dica:** Verifique a grafia do nome do artista",
                    parse_mode='Markdown'
                )
                return
            
            total, successful, failed, skipped = result
            
            # Calcular estat√≠sticas
            success_rate = (successful / total * 100) if total > 0 else 0
            
            # Preparar mensagem de resultado
            result_text = f"üé§ **Download conclu√≠do - Artista: {artist_name}**\n\n"
            result_text += f"üìä **Estat√≠sticas:**\n"
            result_text += f"‚Ä¢ Total de m√∫sicas: *{total}*\n"
            result_text += f"‚Ä¢ ‚úÖ Downloads bem-sucedidos: *{successful}*\n"
            result_text += f"‚Ä¢ ‚ùå Downloads com falha: *{failed}*\n"
            result_text += f"‚Ä¢ ‚è≠Ô∏è M√∫sicas j√° baixadas: *{skipped}*\n"
            result_text += f"‚Ä¢ üìà Taxa de sucesso: *{success_rate:.1f}%*\n\n"
            
            if successful > 0:
                result_text += f"üéâ **{successful} novas m√∫sicas de {artist_name} foram baixadas com sucesso!**\n\n"
                result_text += f"üéØ **Modo anti-√°lbum ativo:** Apenas tracks individuais foram baixadas\n"
                result_text += f"üìÅ **Localiza√ß√£o:** Diret√≥rio `{artist_name.replace(' ', '_')}`"
            else:
                result_text += f"‚ÑπÔ∏è **Nenhuma m√∫sica nova foi baixada**\n\n"
                if skipped > 0:
                    result_text += f"Todas as {skipped} m√∫sicas j√° estavam no seu hist√≥rico de downloads."
                else:
                    result_text += f"N√£o foi poss√≠vel baixar nenhuma m√∫sica do artista."
            
            await update.message.reply_text(result_text, parse_mode='Markdown')
            
        except Exception as e:
            # Remover tarefa da lista de ativas em caso de erro
            if user_id in self.active_tasks and task_id in self.active_tasks[user_id]:
                del self.active_tasks[user_id][task_id]
            
            await update.message.reply_text(
                f"‚ùå **Erro inesperado no download do artista \"{artist_name}\"**\n\n"
                f"**Erro:** `{str(e)}`\n\n"
                f"**Poss√≠veis solu√ß√µes:**\n"
                f"‚Ä¢ Verifique se as credenciais do Last.fm est√£o configuradas\n"
                f"‚Ä¢ Verifique se o servidor SLSKD est√° online\n"
                f"‚Ä¢ Tente novamente mais tarde\n"
                f"‚Ä¢ Tente com um artista diferente",
                parse_mode='Markdown'
            )
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /history"""
        if not self._is_authorized(update):
            return
        
        try:
            # Captura sa√≠da do hist√≥rico
            import io
            from contextlib import redirect_stdout
            
            f = io.StringIO()
            with redirect_stdout(f):
                show_download_history()
            
            history_output = f.getvalue()
            
            if history_output.strip():
                # Limita o tamanho da mensagem
                if len(history_output) > 4000:
                    history_output = history_output[:4000] + "\n... (truncado)"
                
                await update.message.reply_text(f"```\n{history_output}\n```", parse_mode='Markdown')
            else:
                await update.message.reply_text("üìù Hist√≥rico vazio")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå Erro ao obter hist√≥rico: {e}")
    
    async def clear_history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /clear_history"""
        if not self._is_authorized(update):
            return
        
        # Bot√µes de confirma√ß√£o
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ Sim, limpar", callback_data="clear_history_yes"),
                InlineKeyboardButton("‚ùå Cancelar", callback_data="clear_history_no")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üóëÔ∏è Tem certeza que deseja limpar todo o hist√≥rico?",
            reply_markup=reply_markup
        )
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /info - mostra informa√ß√µes do chat atual"""
        chat = update.effective_chat
        user = update.effective_user
        message = update.message
        
        info_text = "üìã **Informa√ß√µes do Chat**\n\n"
        info_text += f"üë§ **Usu√°rio:**\n"
        info_text += f"‚Ä¢ ID: `{user.id}`\n"
        info_text += f"‚Ä¢ Nome: {user.first_name}"
        if user.last_name:
            info_text += f" {user.last_name}"
        if user.username:
            info_text += f" (@{user.username})"
        info_text += "\n\n"
        
        info_text += f"üí¨ **Chat:**\n"
        info_text += f"‚Ä¢ ID: `{chat.id}`\n"
        info_text += f"‚Ä¢ Tipo: {chat.type}\n"
        if chat.title:
            info_text += f"‚Ä¢ T√≠tulo: {chat.title}\n"
        
        # Informa√ß√µes de thread (se aplic√°vel)
        thread_id = getattr(message, 'message_thread_id', None)
        if thread_id:
            info_text += f"‚Ä¢ Thread ID: `{thread_id}`\n"
            info_text += f"‚Ä¢ Configura√ß√£o para .env: `{chat.id}:{thread_id}`\n"
        else:
            info_text += f"‚Ä¢ Thread: Mensagem no grupo principal\n"
        
        info_text += "\nüîß **Para configurar acesso:**\n"
        
        if chat.type == 'private':
            info_text += f"Adicione ao .env:\n`TELEGRAM_ALLOWED_USERS={user.id}`"
        elif chat.type in ['group', 'supergroup']:
            info_text += f"Para permitir todo o grupo:\n`TELEGRAM_ALLOWED_GROUPS={chat.id}`\n\n"
            if thread_id:
                info_text += f"Para permitir apenas esta thread:\n"
                info_text += f"`TELEGRAM_ALLOWED_GROUPS={chat.id}`\n"
                info_text += f"`TELEGRAM_ALLOWED_THREADS={chat.id}:{thread_id}`"
            else:
                info_text += f"Para permitir apenas uma thread espec√≠fica:\n"
                info_text += f"`TELEGRAM_ALLOWED_GROUPS={chat.id}`\n"
                info_text += f"`TELEGRAM_ALLOWED_THREADS={chat.id}:THREAD_ID`\n"
                info_text += f"(substitua THREAD_ID pelo ID da thread desejada)"
        
        await update.message.reply_text(info_text, parse_mode='Markdown')
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /tasks - mostra tarefas ativas do usu√°rio"""
        if not self._is_authorized(update):
            return
        
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        user_tasks = self._get_user_tasks(user_id, chat_id)
        
        if not user_tasks:
            await update.message.reply_text("üìù Nenhuma tarefa ativa no momento")
            return
        
        tasks_text = "üîÑ **Tarefas Ativas:**\n\n"
        keyboard = []
        
        for task_id, task_info in user_tasks:
            task_type = task_info['type']
            created_at = task_info['created_at'].strftime('%H:%M:%S')
            
            tasks_text += f"‚Ä¢ **{task_type}** (ID: `{task_id}`)\n"
            tasks_text += f"  Iniciada √†s {created_at}\n\n"
            
            # Adiciona bot√£o de cancelar para cada tarefa
            keyboard.append([
                InlineKeyboardButton(f"üõë Cancelar {task_type}", callback_data=f"cancel_{task_id}")
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        await update.message.reply_text(tasks_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manipula bot√µes inline"""
        query = update.callback_query
        await query.answer()
        
        if not self._is_authorized(update):
            return
        
        if query.data == "clear_history_yes":
            try:
                clear_download_history()
                await query.edit_message_text("üóëÔ∏è Hist√≥rico limpo com sucesso!")
            except Exception as e:
                await query.edit_message_text(f"‚ùå Erro ao limpar hist√≥rico: {e}")
        
        elif query.data == "clear_history_no":
            await query.edit_message_text("‚ùå Opera√ß√£o cancelada")
        
        elif query.data == "album_cancel":
            await query.edit_message_text("‚ùå Sele√ß√£o de √°lbum cancelada")
        
        elif query.data.startswith("album_"):
            # Processa sele√ß√£o de √°lbum
            await self._handle_album_selection(query)
        
        elif query.data == "music_cancel":
            await query.edit_message_text("‚ùå Sele√ß√£o de m√∫sica cancelada")
        
        elif query.data.startswith("music_"):
            # Processa sele√ß√£o de m√∫sica
            await self._handle_music_selection(query)
        
        elif query.data.startswith("cancel_"):
            # Extrai o task_id do callback data
            task_id = query.data[7:]  # Remove "cancel_" prefix
            
            # Verifica se a tarefa pertence ao usu√°rio
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            
            if task_id in self.active_tasks:
                task_info = self.active_tasks[task_id]
                
                # Verifica se o usu√°rio tem permiss√£o para cancelar esta tarefa
                if task_info['user_id'] == user_id and task_info['chat_id'] == chat_id:
                    if self._cancel_task(task_id):
                        await query.edit_message_text(f"üõë Tarefa cancelada: {task_info['type']}")
                    else:
                        await query.edit_message_text("‚ùå Tarefa j√° foi conclu√≠da ou n√£o p√¥de ser cancelada")
                else:
                    await query.edit_message_text("‚ùå Voc√™ n√£o tem permiss√£o para cancelar esta tarefa")
            else:
                await query.edit_message_text("‚ùå Tarefa n√£o encontrada ou j√° foi conclu√≠da")
    
    async def _handle_album_selection(self, query):
        """Manipula sele√ß√£o de √°lbum pelo usu√°rio"""
        try:
            # Parse do callback data: album_{index}_{query_hash}
            parts = query.data.split('_')
            if len(parts) != 3:
                await query.edit_message_text("‚ùå Dados inv√°lidos")
                return
            
            album_index = int(parts[1])
            query_hash = int(parts[2])
            
            # Recupera candidatos do cache
            if not hasattr(self, '_album_candidates_cache') or query_hash not in self._album_candidates_cache:
                await query.edit_message_text("‚ùå Dados expirados. Fa√ßa uma nova busca.")
                return
            
            cache_data = self._album_candidates_cache[query_hash]
            candidates = cache_data['candidates']
            original_query = cache_data['original_query']
            
            if album_index >= len(candidates):
                await query.edit_message_text("‚ùå √Ålbum inv√°lido")
                return
            
            selected_album = candidates[album_index]
            
            # Inicia download do √°lbum selecionado
            await self._start_album_download(query, selected_album, original_query)
            
            # Remove do cache ap√≥s uso
            del self._album_candidates_cache[query_hash]
            
        except (ValueError, IndexError) as e:
            await query.edit_message_text(f"‚ùå Erro ao processar sele√ß√£o: {e}")
        except Exception as e:
            await query.edit_message_text(f"‚ùå Erro inesperado: {e}")
    
    async def _start_album_download(self, query, album_info: dict, original_query: str):
        """Inicia o download do √°lbum selecionado"""
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        
        album_name = self._extract_album_name_from_metadata(album_info)
        clean_album_name = self._escape_markdown(album_name)
        clean_username = self._escape_markdown(album_info['username'])
        
        # Cria tarefa para o download
        task = asyncio.create_task(self._execute_album_download(album_info, original_query))
        task_id = self._register_task(task, f"Download de √Ålbum", user_id, chat_id)
        
        # Atualiza mensagem com informa√ß√µes do download (sem formata√ß√£o markdown)
        cancel_keyboard = self._create_cancel_keyboard(task_id)
        
        download_text = f"üíø Baixando √Ålbum Selecionado\n\n"
        download_text += f"üìÄ {clean_album_name}\n"
        download_text += f"üë§ Usu√°rio: {clean_username}\n"
        download_text += f"üéµ Faixas: {album_info['track_count']}\n"
        download_text += f"üéß Bitrate m√©dio: {album_info['avg_bitrate']:.0f} kbps\n"
        download_text += f"üíæ Tamanho: {album_info['total_size'] / 1024 / 1024:.1f} MB\n\n"
        download_text += f"‚è≥ Iniciando downloads...\n"
        download_text += f"üí° Use o bot√£o abaixo para cancelar se necess√°rio"
        
        try:
            await query.edit_message_text(download_text, reply_markup=cancel_keyboard)
        except Exception as e:
            logger.error(f"Erro ao atualizar mensagem de download: {e}")
            # Fallback simples
            await query.edit_message_text(f"üíø Baixando: {clean_album_name}", reply_markup=cancel_keyboard)
        
        try:
            # Aguarda conclus√£o do download
            result = await task
            
            if result['success']:
                final_text = f"‚úÖ √Ålbum baixado com sucesso!\n\n"
                final_text += f"üìÄ {clean_album_name}\n"
                final_text += f"‚úÖ Downloads iniciados: {result['successful']}\n"
                final_text += f"‚ùå Falhas: {result['failed']}\n\n"
                final_text += f"üí° Monitore o progresso na interface web do slskd"
                
                await query.edit_message_text(final_text)
            else:
                error_msg = f"‚ùå Falha no download do √°lbum: {result.get('error', 'Erro desconhecido')}"
                await query.edit_message_text(error_msg)
                
        except asyncio.CancelledError:
            cancel_msg = f"üõë Download do √°lbum cancelado: {clean_album_name}"
            await query.edit_message_text(cancel_msg)
        except Exception as e:
            error_msg = f"‚ùå Erro durante download: {str(e)}"
            await query.edit_message_text(error_msg)
        finally:
            self._unregister_task(task_id)
    
    async def _execute_album_download(self, album_info: dict, search_term: str) -> dict:
        """Executa o download do √°lbum de forma ass√≠ncrona"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self._download_album_tracks, album_info, search_term)
    
    def _download_album_tracks(self, album_info: dict, search_term: str) -> dict:
        """Baixa todas as faixas de um √°lbum"""
        try:
            from main import download_mp3
        except ImportError:
            from slskd_mp3_search import download_mp3
        import time
        import os
        
        username = album_info['username']
        files = album_info['files']
        
        print(f"\nüì• Iniciando download de {len(files)} faixas do √°lbum...")
        
        successful_downloads = 0
        failed_downloads = 0
        
        try:
            for i, file_info in enumerate(files, 1):
                filename = file_info.get('filename', '')
                file_size = file_info.get('size', 0)
                
                print(f"\nüìç [{i}/{len(files)}] {os.path.basename(filename)}")
                print(f"   üíæ Tamanho: {file_size / 1024 / 1024:.2f} MB")
                print(f"   üéß Bitrate: {file_info.get('bitRate', 0)} kbps")
                
                # Tenta fazer o download
                success = download_mp3(self.slskd, username, filename, file_size, f"{search_term} - {os.path.basename(filename)}")
                
                if success:
                    successful_downloads += 1
                    print(f"   ‚úÖ Download iniciado com sucesso")
                else:
                    failed_downloads += 1
                    print(f"   ‚ùå Falha no download")
                
                # Pausa entre downloads
                if i < len(files):
                    time.sleep(1)
            
            return {
                'success': True,
                'successful': successful_downloads,
                'failed': failed_downloads
            }
            
        except Exception as e:
            print(f"‚ùå Erro durante download do √°lbum: {e}")
            return {
                'success': False,
                'error': str(e),
                'successful': successful_downloads,
                'failed': failed_downloads
            }
    
    async def _handle_music_selection(self, query):
        """Manipula sele√ß√£o de m√∫sica pelo usu√°rio"""
        try:
            # Parse do callback data: music_{index}_{query_hash}
            parts = query.data.split('_')
            if len(parts) != 3:
                await query.edit_message_text("‚ùå Dados inv√°lidos")
                return
            
            music_index = int(parts[1])
            query_hash = int(parts[2])
            
            # Recupera candidatos do cache
            if not hasattr(self, '_music_candidates_cache') or query_hash not in self._music_candidates_cache:
                await query.edit_message_text("‚ùå Dados expirados. Fa√ßa uma nova busca.")
                return
            
            cache_data = self._music_candidates_cache[query_hash]
            candidates = cache_data['candidates']
            original_query = cache_data['original_query']
            
            if music_index >= len(candidates):
                await query.edit_message_text("‚ùå M√∫sica inv√°lida")
                return
            
            selected_music = candidates[music_index]
            
            # Inicia download da m√∫sica selecionada
            await self._start_music_download(query, selected_music, original_query)
            
            # Remove do cache ap√≥s uso
            del self._music_candidates_cache[query_hash]
            
        except (ValueError, IndexError) as e:
            await query.edit_message_text(f"‚ùå Erro ao processar sele√ß√£o: {e}")
        except Exception as e:
            await query.edit_message_text(f"‚ùå Erro inesperado: {e}")
    
    async def _start_music_download(self, query, music_info: dict, original_query: str):
        """Inicia o download da m√∫sica selecionada"""
        import os
        
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        
        filename = os.path.basename(music_info['filename'])
        clean_filename = self._escape_markdown(filename)
        clean_username = self._escape_markdown(music_info['username'])
        
        # Cria tarefa para o download
        task = asyncio.create_task(self._execute_music_download(music_info, original_query))
        task_id = self._register_task(task, f"Download de M√∫sica", user_id, chat_id)
        
        # Atualiza mensagem com informa√ß√µes do download (sem formata√ß√£o markdown)
        cancel_keyboard = self._create_cancel_keyboard(task_id)
        
        download_text = f"üéµ Baixando M√∫sica Selecionada\n\n"
        download_text += f"üé∂ {clean_filename}\n"
        download_text += f"üë§ Usu√°rio: {clean_username}\n"
        download_text += f"üéß Bitrate: {music_info['bitrate']} kbps\n"
        download_text += f"üíæ Tamanho: {music_info['size'] / 1024 / 1024:.1f} MB\n"
        download_text += f"‚è±Ô∏è Dura√ß√£o: {music_info.get('duration', 'N/A')}\n\n"
        download_text += f"‚è≥ Iniciando download...\n"
        download_text += f"üí° Use o bot√£o abaixo para cancelar se necess√°rio"
        
        try:
            await query.edit_message_text(download_text, reply_markup=cancel_keyboard)
        except Exception as e:
            logger.error(f"Erro ao atualizar mensagem de download: {e}")
            # Fallback simples
            await query.edit_message_text(f"üéµ Baixando: {clean_filename}", reply_markup=cancel_keyboard)
        
        try:
            # Aguarda conclus√£o do download
            result = await task
            
            if result['success']:
                final_text = f"‚úÖ M√∫sica baixada com sucesso!\n\n"
                final_text += f"üé∂ {clean_filename}\n"
                final_text += f"üí° Monitore o progresso na interface web do slskd"
                
                await query.edit_message_text(final_text)
            else:
                error_msg = f"‚ùå Falha no download da m√∫sica: {result.get('error', 'Erro desconhecido')}"
                await query.edit_message_text(error_msg)
                
        except asyncio.CancelledError:
            cancel_msg = f"üõë Download da m√∫sica cancelado: {clean_filename}"
            await query.edit_message_text(cancel_msg)
        except Exception as e:
            error_msg = f"‚ùå Erro durante download: {str(e)}"
            await query.edit_message_text(error_msg)
        finally:
            self._unregister_task(task_id)
    
    async def _execute_music_download(self, music_info: dict, search_term: str) -> dict:
        """Executa o download da m√∫sica de forma ass√≠ncrona"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self._download_music_track, music_info, search_term)
    
    def _download_music_track(self, music_info: dict, search_term: str) -> dict:
        """Baixa uma m√∫sica individual"""
        try:
            from main import download_mp3
        except ImportError:
            from slskd_mp3_search import download_mp3
        import os
        
        username = music_info['username']
        filename = music_info['filename']
        file_size = music_info['size']
        
        print(f"\nüì• Iniciando download da m√∫sica...")
        print(f"üéµ {os.path.basename(filename)}")
        print(f"üíæ Tamanho: {file_size / 1024 / 1024:.2f} MB")
        print(f"üéß Bitrate: {music_info['bitrate']} kbps")
        
        try:
            # Tenta fazer o download
            success = download_mp3(self.slskd, username, filename, file_size, search_term)
            
            if success:
                print(f"‚úÖ Download iniciado com sucesso")
                return {
                    'success': True
                }
            else:
                print(f"‚ùå Falha no download")
                return {
                    'success': False,
                    'error': 'Falha ao iniciar download'
                }
            
        except Exception as e:
            print(f"‚ùå Erro durante download da m√∫sica: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _handle_music_search(self, update: Update, search_term: str):
        """Manipula busca de m√∫sica com sele√ß√£o de candidatos"""
        if not self.slskd:
            await update.message.reply_text("‚ùå SLSKD n√£o est√° conectado")
            return
        
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # Cria tarefa para a busca de m√∫sica
        task = asyncio.create_task(self._execute_music_search_candidates(search_term))
        task_id = self._register_task(task, "Busca de M√∫sica", user_id, chat_id)
        
        # Mensagem de progresso com bot√£o de cancelar
        cancel_keyboard = self._create_cancel_keyboard(task_id)
        progress_msg = await update.message.reply_text(
            f"üéµ Buscando m√∫sica: {search_term}\nüí° Use o bot√£o abaixo para cancelar se necess√°rio",
            reply_markup=cancel_keyboard
        )
        
        try:
            # Aguarda resultado da busca
            music_candidates = await task
            
            if music_candidates:
                # Mostra os 5 melhores candidatos com bot√µes
                await self._show_music_candidates(progress_msg, music_candidates, search_term)
            else:
                await progress_msg.edit_text(f"‚ùå Nenhuma m√∫sica encontrada para: {search_term}\nüí° Tente:\n‚Ä¢ Verificar a grafia\n‚Ä¢ Usar formato 'Artista - M√∫sica'\n‚Ä¢ Buscar por √°lbum completo com /album")
                
        except asyncio.CancelledError:
            await progress_msg.edit_text(f"üõë Busca de m√∫sica cancelada: {search_term}")
        except Exception as e:
            await progress_msg.edit_text(f"‚ùå Erro na busca de m√∫sica: {e}")
        finally:
            # Remove tarefa do registro
            self._unregister_task(task_id)
    
    async def _execute_music_search_candidates(self, search_term: str) -> list:
        """Executa a busca de m√∫sica e retorna candidatos sem fazer download"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self._search_music_candidates, search_term)
    
    def _search_music_candidates(self, search_term: str) -> list:
        """Busca candidatos de m√∫sica sem fazer download autom√°tico"""
        try:
            from main import (
                is_duplicate_download, create_search_variations, 
                wait_for_search_completion
            )
        except ImportError:
            from slskd_mp3_search import (
                is_duplicate_download, create_search_variations, 
                wait_for_search_completion
            )
        import os
        
        print(f"üéµ Busca inteligente por M√öSICA: '{search_term}'")
        
        # Verifica se j√° foi baixado anteriormente
        if is_duplicate_download(search_term):
            print(f"‚è≠Ô∏è Pulando busca - m√∫sica j√° baixada anteriormente")
            return []
        
        variations = create_search_variations(search_term)
        print(f"üìù {len(variations)} varia√ß√µes criadas para m√∫sica")
        
        all_candidates = []
        
        for i, search_variation in enumerate(variations, 1):
            print(f"\nüìç Tentativa {i}/{len(variations)}: '{search_variation}'")
            
            try:
                print(f"üîç Buscando m√∫sica: '{search_variation}'")
                
                search_result = self.slskd.searches.search_text(search_variation)
                search_id = search_result.get('id')
                
                # Aguarda a busca finalizar
                search_responses = wait_for_search_completion(self.slskd, search_id, max_wait=int(os.getenv('SEARCH_WAIT_TIME', 25)))
                
                if not search_responses:
                    print("‚ùå Nenhuma resposta")
                    continue
                
                # Conta total de arquivos encontrados
                total_files = sum(len(response.get('files', [])) for response in search_responses)
                print(f"üìä Total de arquivos encontrados: {total_files}")
                
                if total_files > 0:
                    # Para m√∫sicas, procura por arquivos individuais de qualidade
                    music_candidates = self._extract_music_candidates(search_responses, search_term)
                    
                    if music_candidates:
                        print(f"üéµ Encontrados {len(music_candidates)} candidatos de m√∫sica")
                        all_candidates.extend(music_candidates)
                        
                        # Se encontrou bons candidatos, para a busca
                        if len(all_candidates) >= 10:
                            break
            
            except Exception as e:
                print(f"‚ùå Erro na busca: {e}")
        
        # Remove duplicatas e ordena por qualidade
        unique_candidates = {}
        for candidate in all_candidates:
            key = f"{candidate['username']}:{candidate['filename']}"
            if key not in unique_candidates or candidate['bitrate'] > unique_candidates[key]['bitrate']:
                unique_candidates[key] = candidate
        
        final_candidates = list(unique_candidates.values())
        final_candidates.sort(key=lambda x: (x['bitrate'], x['size']), reverse=True)
        
        # Retorna os 5 melhores
        return final_candidates[:5]
    
    def _extract_music_candidates(self, search_responses: list, search_term: str) -> list:
        """Extrai candidatos de m√∫sica dos resultados de busca"""
        candidates = []
        
        for response in search_responses:
            username = response.get('username', 'Unknown')
            files = response.get('files', [])
            
            for file_info in files:
                filename = file_info.get('filename', '')
                
                # Filtra apenas arquivos de m√∫sica
                if not filename.lower().endswith(('.mp3', '.flac', '.wav', '.m4a')):
                    continue
                
                # Extrai informa√ß√µes do arquivo
                size = file_info.get('size', 0)
                bitrate = file_info.get('bitRate', 0)
                duration = file_info.get('length', 0)
                
                # Converte dura√ß√£o para formato leg√≠vel
                if duration > 0:
                    minutes = duration // 60
                    seconds = duration % 60
                    duration_str = f"{minutes}:{seconds:02d}"
                else:
                    duration_str = "N/A"
                
                # Filtra arquivos muito pequenos (provavelmente n√£o s√£o m√∫sicas completas)
                if size < 1024 * 1024:  # Menor que 1MB
                    continue
                
                # Filtra bitrates muito baixos
                if bitrate > 0 and bitrate < 128:
                    continue
                
                candidate = {
                    'username': username,
                    'filename': filename,
                    'size': size,
                    'bitrate': bitrate if bitrate > 0 else 320,  # Default se n√£o informado
                    'duration': duration_str
                }
                
                candidates.append(candidate)
        
        return candidates
    
    async def _handle_album_search(self, update: Update, album_query: str):
        """Manipula busca de √°lbum com sele√ß√£o de candidatos"""
        if not self.slskd:
            await update.message.reply_text("‚ùå SLSKD n√£o est√° conectado")
            return
        
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # Cria tarefa para a busca de √°lbum
        task = asyncio.create_task(self._execute_album_search_candidates(album_query))
        task_id = self._register_task(task, "Busca de √Ålbum", user_id, chat_id)
        
        # Mensagem de progresso com bot√£o de cancelar
        cancel_keyboard = self._create_cancel_keyboard(task_id)
        progress_msg = await update.message.reply_text(
            f"üíø Buscando √°lbum: {album_query}\nüí° Use o bot√£o abaixo para cancelar se necess√°rio",
            reply_markup=cancel_keyboard
        )
        
        try:
            # Aguarda resultado da busca
            album_candidates = await task
            
            if album_candidates:
                # Mostra os 5 melhores candidatos com bot√µes
                await self._show_album_candidates(progress_msg, album_candidates, album_query)
            else:
                await progress_msg.edit_text(f"‚ùå Nenhum √°lbum encontrado para: {album_query}\nüí° Tente:\n‚Ä¢ Verificar a grafia\n‚Ä¢ Usar formato 'Artista - √Ålbum'\n‚Ä¢ Buscar por m√∫sica individual com /search")
                
        except asyncio.CancelledError:
            await progress_msg.edit_text(f"üõë Busca de √°lbum cancelada: {album_query}")
        except Exception as e:
            await progress_msg.edit_text(f"‚ùå Erro na busca de √°lbum: {e}")
        finally:
            # Remove tarefa do registro
            self._unregister_task(task_id)
    
    async def _execute_album_search_candidates(self, album_query: str) -> list:
        """Executa a busca de √°lbum e retorna candidatos sem fazer download"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self._search_album_candidates, album_query)
    
    def _search_album_candidates(self, album_query: str) -> list:
        """Busca candidatos de √°lbum sem fazer download autom√°tico"""
        try:
            from main import (
                is_duplicate_download, extract_artist_and_album, 
                create_album_search_variations, wait_for_search_completion,
                find_album_candidates
            )
        except ImportError:
            from slskd_mp3_search import (
                is_duplicate_download, extract_artist_and_album, 
                create_album_search_variations, wait_for_search_completion,
                find_album_candidates
            )
        import os
        
        print(f"üíø Busca inteligente por √ÅLBUM: '{album_query}'")
        
        # Verifica se j√° foi baixado anteriormente
        if is_duplicate_download(album_query):
            print(f"‚è≠Ô∏è Pulando busca - √°lbum j√° baixado anteriormente")
            return []
        
        artist, album = extract_artist_and_album(album_query)
        if artist and album:
            print(f"üé§ Artista: '{artist}' | üíø √Ålbum: '{album}'")
        
        variations = create_album_search_variations(album_query)
        print(f"üìù {len(variations)} varia√ß√µes criadas para √°lbum")
        
        all_candidates = []
        
        for i, search_term in enumerate(variations, 1):
            print(f"\nüìç Tentativa {i}/{len(variations)}: '{search_term}'")
            
            try:
                print(f"üîç Buscando √°lbum: '{search_term}'")
                
                search_result = self.slskd.searches.search_text(search_term)
                search_id = search_result.get('id')
                
                # Aguarda a busca finalizar
                search_responses = wait_for_search_completion(self.slskd, search_id, max_wait=int(os.getenv('SEARCH_WAIT_TIME', 25)))
                
                if not search_responses:
                    print("‚ùå Nenhuma resposta")
                    continue
                
                # Conta total de arquivos encontrados
                total_files = sum(len(response.get('files', [])) for response in search_responses)
                print(f"üìä Total de arquivos encontrados: {total_files}")
                
                if total_files > 0:
                    # Para √°lbuns, procura por m√∫ltiplos arquivos do mesmo usu√°rio/diret√≥rio
                    album_candidates = find_album_candidates(search_responses, album_query)
                    
                    if album_candidates:
                        print(f"üíø Encontrados {len(album_candidates)} candidatos a √°lbum")
                        all_candidates.extend(album_candidates)
                        
                        # Se encontrou bons candidatos, para a busca
                        if len(all_candidates) >= 5:
                            break
            
            except Exception as e:
                print(f"‚ùå Erro na busca: {e}")
        
        # Remove duplicatas e ordena por qualidade
        unique_candidates = {}
        for candidate in all_candidates:
            key = f"{candidate['username']}:{candidate['directory']}"
            if key not in unique_candidates or candidate['track_count'] > unique_candidates[key]['track_count']:
                unique_candidates[key] = candidate
        
        final_candidates = list(unique_candidates.values())
        final_candidates.sort(key=lambda x: (x['track_count'], x['avg_bitrate']), reverse=True)
        
        # Retorna os 5 melhores
        return final_candidates[:5]
    
    def _escape_markdown(self, text: str) -> str:
        """Escapa caracteres especiais do Markdown para evitar erros de parsing"""
        if not text:
            return ""
        
        # Remove ou substitui caracteres problem√°ticos
        # Em vez de escapar, vamos limpar o texto
        cleaned_text = text
        
        # Remove caracteres que podem causar problemas
        problematic_chars = ['*', '_', '[', ']', '`', '\\']
        for char in problematic_chars:
            cleaned_text = cleaned_text.replace(char, '')
        
        # Substitui outros caracteres problem√°ticos
        cleaned_text = cleaned_text.replace('(', '\\(')
        cleaned_text = cleaned_text.replace(')', '\\)')
        
        return cleaned_text
    
    def _safe_format_text(self, text: str, use_markdown: bool = True) -> str:
        """Formata texto de forma segura para o Telegram"""
        if not use_markdown:
            return text
        
        # Remove formata√ß√£o markdown existente e aplica escape
        clean_text = text.replace('**', '').replace('*', '').replace('__', '').replace('_', '')
        return clean_text
    
    async def _show_album_candidates(self, message, candidates: list, original_query: str):
        """Mostra candidatos de √°lbum com bot√µes para sele√ß√£o"""
        if not candidates:
            await message.edit_text("‚ùå Nenhum √°lbum encontrado")
            return
        
        # Texto com informa√ß√µes dos √°lbuns (sem formata√ß√£o markdown para evitar erros)
        text = f"üíø √Ålbuns encontrados para: {original_query}\n\n"
        text += "üìã Selecione um √°lbum para baixar:\n\n"
        
        # Bot√µes para cada √°lbum
        keyboard = []
        
        for i, candidate in enumerate(candidates, 1):
            # Informa√ß√µes do √°lbum no texto usando metadados
            album_name = self._extract_album_name_from_metadata(candidate)
            username = candidate['username']
            
            # Limpa caracteres problem√°ticos
            clean_album_name = self._escape_markdown(album_name)
            clean_username = self._escape_markdown(username)
            
            text += f"{i}. {clean_album_name}\n"
            text += f"   üë§ {clean_username}\n"
            text += f"   üéµ {candidate['track_count']} faixas\n"
            text += f"   üéß {candidate['avg_bitrate']:.0f} kbps\n"
            text += f"   üíæ {candidate['total_size'] / 1024 / 1024:.1f} MB\n\n"
            
            # Bot√£o para este √°lbum (tamb√©m limpa o texto do bot√£o)
            button_album_name = album_name.replace('[', '').replace(']', '').replace('*', '').replace('_', '')
            button_text = f"üíø {i}. {button_album_name} ({candidate['track_count']} faixas)"
            
            # Limita tamanho do bot√£o
            if len(button_text) > 64:  # Limite do Telegram
                short_name = button_album_name[:35] + "..."
                button_text = f"üíø {i}. {short_name} ({candidate['track_count']} faixas)"
            
            # Dados do callback incluem √≠ndice e query original
            callback_data = f"album_{i-1}_{hash(original_query) % 10000}"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # Bot√£o de cancelar
        keyboard.append([InlineKeyboardButton("‚ùå Cancelar", callback_data="album_cancel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Armazena candidatos temporariamente para uso nos callbacks
        query_hash = hash(original_query) % 10000
        if not hasattr(self, '_album_candidates_cache'):
            self._album_candidates_cache = {}
        self._album_candidates_cache[query_hash] = {
            'candidates': candidates,
            'original_query': original_query,
            'timestamp': datetime.now()
        }
        
        # Envia mensagem sem formata√ß√£o markdown para evitar erros
        try:
            await message.edit_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Erro ao exibir candidatos: {e}")
            # Fallback ainda mais simples
            simple_text = f"üíø Encontrados {len(candidates)} √°lbuns para: {original_query}\n\nUse os bot√µes abaixo para selecionar:"
            try:
                await message.edit_text(simple_text, reply_markup=reply_markup)
            except Exception as e2:
                logger.error(f"Erro mesmo com texto simples: {e2}")
                await message.edit_text("‚ùå Erro ao exibir resultados. Tente novamente.")
    
    async def _show_music_candidates(self, message, candidates: list, original_query: str):
        """Mostra candidatos de m√∫sica com bot√µes para sele√ß√£o"""
        import os
        
        if not candidates:
            await message.edit_text("‚ùå Nenhuma m√∫sica encontrada")
            return
        
        # Texto com informa√ß√µes das m√∫sicas (sem formata√ß√£o markdown para evitar erros)
        text = f"üéµ M√∫sicas encontradas para: {original_query}\n\n"
        text += "üìã Selecione uma m√∫sica para baixar:\n\n"
        
        # Bot√µes para cada m√∫sica
        keyboard = []
        
        for i, candidate in enumerate(candidates, 1):
            # Informa√ß√µes da m√∫sica no texto
            filename = os.path.basename(candidate['filename'])
            username = candidate['username']
            
            # Limpa caracteres problem√°ticos
            clean_filename = self._escape_markdown(filename)
            clean_username = self._escape_markdown(username)
            
            text += f"{i}. {clean_filename}\n"
            text += f"   üë§ {clean_username}\n"
            text += f"   üéß {candidate['bitrate']} kbps\n"
            text += f"   üíæ {candidate['size'] / 1024 / 1024:.1f} MB\n"
            text += f"   ‚è±Ô∏è {candidate.get('duration', 'N/A')}\n\n"
            
            # Bot√£o para esta m√∫sica (tamb√©m limpa o texto do bot√£o)
            button_filename = filename.replace('[', '').replace(']', '').replace('*', '').replace('_', '')
            button_text = f"üéµ {i}. {button_filename}"
            
            # Limita tamanho do bot√£o
            if len(button_text) > 64:  # Limite do Telegram
                short_name = button_filename[:45] + "..."
                button_text = f"üéµ {i}. {short_name}"
            
            # Dados do callback incluem √≠ndice e query original
            callback_data = f"music_{i-1}_{hash(original_query) % 10000}"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # Bot√£o de cancelar
        keyboard.append([InlineKeyboardButton("‚ùå Cancelar", callback_data="music_cancel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Armazena candidatos temporariamente para uso nos callbacks
        query_hash = hash(original_query) % 10000
        if not hasattr(self, '_music_candidates_cache'):
            self._music_candidates_cache = {}
        self._music_candidates_cache[query_hash] = {
            'candidates': candidates,
            'original_query': original_query,
            'timestamp': datetime.now()
        }
        
        # Envia mensagem sem formata√ß√£o markdown para evitar erros
        try:
            await message.edit_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Erro ao exibir candidatos de m√∫sica: {e}")
            # Fallback ainda mais simples
            simple_text = f"üéµ Encontradas {len(candidates)} m√∫sicas para: {original_query}\n\nUse os bot√µes abaixo para selecionar:"
            try:
                await message.edit_text(simple_text, reply_markup=reply_markup)
            except Exception as e2:
                logger.error(f"Erro mesmo com texto simples: {e2}")
                await message.edit_text("‚ùå Erro ao exibir resultados. Tente novamente.")
    
    def _extract_album_name_from_path(self, directory_path: str) -> str:
        """Extrai nome do √°lbum do caminho do diret√≥rio"""
        if not directory_path:
            return "√Ålbum Desconhecido"
        
        # Pega o √∫ltimo diret√≥rio do caminho
        album_name = os.path.basename(directory_path)
        
        # Se estiver vazio, pega o pen√∫ltimo
        if not album_name:
            parts = directory_path.rstrip('/\\').split('/')
            if len(parts) > 1:
                album_name = parts[-2]
        
        # Limita o tamanho
        if len(album_name) > 50:
            album_name = album_name[:47] + "..."
        
        return album_name or "√Ålbum Desconhecido"
    
    def _extract_album_name_from_metadata(self, candidate: dict) -> str:
        """Extrai nome do √°lbum usando o m√≥dulo especializado"""
        try:
            import sys
            import os
            # Adiciona o diret√≥rio utils ao path se n√£o estiver
            utils_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'utils')
            if utils_path not in sys.path:
                sys.path.insert(0, utils_path)
            
            from album_name_extractor import get_album_name
            return get_album_name(candidate)
        except (ImportError, Exception) as e:
            print(f"Erro ao importar album_name_extractor: {e}")
            # Fallback para m√©todo b√°sico se m√≥dulo n√£o dispon√≠vel
            return self._extract_album_name_from_path(candidate['directory'])
    
    async def _handle_playlist_download(self, update: Update, playlist_url: str, options: dict):
        """Manipula download de playlist"""
        if not self.spotify_client:
            await update.message.reply_text("‚ùå Spotify n√£o est√° configurado")
            return
        
        if not self.slskd:
            await update.message.reply_text("‚ùå SLSKD n√£o est√° conectado")
            return
        
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # Mensagem de progresso inicial
        progress_msg = await update.message.reply_text(f"üéµ Processando playlist...")
        
        try:
            # Extrai ID da playlist
            playlist_id = extract_playlist_id(playlist_url)
            if not playlist_id:
                await progress_msg.edit_text("‚ùå URL de playlist inv√°lida")
                return
            
            # Processa op√ß√µes
            max_tracks = None
            remove_from_playlist = False
            
            if 'limit' in options:
                try:
                    max_tracks = int(options['limit'])
                except ValueError:
                    pass
            
            if options.get('remove') in ['yes', 'true', '1']:
                remove_from_playlist = True
                # Configura cliente com autentica√ß√£o de usu√°rio
                if not self.spotify_user_client:
                    self.spotify_user_client = setup_spotify_user_client()
                
                if not self.spotify_user_client:
                    await progress_msg.edit_text("‚ùå N√£o foi poss√≠vel autenticar para modificar playlist")
                    return
            
            # Obt√©m faixas da playlist
            if remove_from_playlist:
                tracks, playlist_name = get_playlist_tracks_with_uris(self.spotify_client, playlist_id)
            else:
                # Importar a fun√ß√£o get_playlist_tracks de forma segura
                try:
                    # Tentar importar do m√≥dulo CLI primeiro
                    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'cli'))
                    from main import get_playlist_tracks
                    logger.info("‚úÖ Fun√ß√£o get_playlist_tracks importada do m√≥dulo cli.main")
                except ImportError as e:
                    logger.warning(f"N√£o foi poss√≠vel importar get_playlist_tracks do m√≥dulo cli.main: {e}")
                    
                    # Fallback para o arquivo antigo slskd-mp3-search.py
                    try:
                        # Procurar o arquivo no diret√≥rio raiz
                        root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
                        module_path = os.path.join(root_dir, 'slskd-mp3-search.py')
                        
                        if not os.path.exists(module_path):
                            # Tentar encontrar em outros locais comuns
                            possible_paths = [
                                os.path.join(root_dir, 'slskd-mp3-search.py'),
                                os.path.join(root_dir, 'src', 'slskd-mp3-search.py'),
                                os.path.join(root_dir, 'src', 'cli', 'main.py')
                            ]
                            
                            for path in possible_paths:
                                if os.path.exists(path):
                                    module_path = path
                                    break
                            else:
                                raise FileNotFoundError(f"Arquivo principal n√£o encontrado em nenhum local comum")
                        
                        logger.info(f"Tentando importar do arquivo: {module_path}")
                        import importlib.util
                        spec = importlib.util.spec_from_file_location("slskd_mp3_search", module_path)
                        slskd_module = importlib.util.module_from_spec(spec)
                        sys.modules["slskd_mp3_search"] = slskd_module
                        spec.loader.exec_module(slskd_module)
                        
                        # Importar a fun√ß√£o necess√°ria
                        get_playlist_tracks = slskd_module.get_playlist_tracks
                        logger.info("‚úÖ Fun√ß√£o get_playlist_tracks importada do arquivo slskd-mp3-search.py")
                    except Exception as e:
                        logger.error(f"‚ùå Erro ao importar get_playlist_tracks: {e}")
                        raise ImportError(f"N√£o foi poss√≠vel importar get_playlist_tracks: {e}")
                
                tracks, playlist_name = get_playlist_tracks(self.spotify_client, playlist_id)
            
            if not tracks:
                await progress_msg.edit_text("‚ùå Nenhuma faixa encontrada na playlist")
                return
            
            # Atualiza mensagem com informa√ß√µes da playlist
            total_tracks = len(tracks)
            if max_tracks:
                tracks = tracks[:max_tracks]
            
            # Cria tarefa para o download da playlist
            task = asyncio.create_task(self._download_playlist_background(
                progress_msg, tracks, playlist_name, playlist_id, 
                remove_from_playlist, max_tracks
            ))
            task_id = self._register_task(task, "Download de Playlist", user_id, chat_id)
            
            # Atualiza mensagem com bot√£o de cancelar
            cancel_keyboard = self._create_cancel_keyboard(task_id)
            info_text = f"üéµ **{playlist_name}**\n"
            info_text += f"üìä {len(tracks)} faixas"
            if max_tracks and total_tracks > max_tracks:
                info_text += f" (de {total_tracks} total)"
            if remove_from_playlist:
                info_text += f"\nüóëÔ∏è Faixas encontradas ser√£o removidas da playlist"
            info_text += f"\n\n‚è≥ Iniciando downloads...\nüí° Use o bot√£o abaixo para cancelar se necess√°rio"
            
            await progress_msg.edit_text(info_text, parse_mode='Markdown', reply_markup=cancel_keyboard)
            
            # Aguarda conclus√£o da tarefa
            try:
                await task
            except asyncio.CancelledError:
                await progress_msg.edit_text(f"üõë Download de playlist cancelado: {playlist_name}", parse_mode='Markdown')
            finally:
                self._unregister_task(task_id)
            
        except Exception as e:
            await progress_msg.edit_text(f"‚ùå Erro ao processar playlist: {e}")
    
    async def _download_playlist_background(self, progress_msg, tracks, playlist_name, 
                                         playlist_id, remove_from_playlist, max_tracks):
        """Executa download da playlist em background"""
        try:
            successful_downloads = 0
            skipped_duplicates = 0
            failed_downloads = 0
            removed_from_playlist_count = 0
            
            for i, track in enumerate(tracks, 1):
                # Verifica se a tarefa foi cancelada
                if asyncio.current_task().cancelled():
                    raise asyncio.CancelledError()
                
                search_term = track['search_term']
                
                # Atualiza progresso
                progress_text = f"üéµ **{playlist_name}**\n"
                progress_text += f"üìç [{i}/{len(tracks)}] {search_term[:50]}...\n"
                progress_text += f"‚úÖ Sucessos: {successful_downloads} | "
                progress_text += f"‚è≠Ô∏è Puladas: {skipped_duplicates} | "
                progress_text += f"‚ùå Falhas: {failed_downloads}"
                
                if remove_from_playlist:
                    progress_text += f" | üóëÔ∏è Removidas: {removed_from_playlist_count}"
                
                try:
                    await progress_msg.edit_text(progress_text, parse_mode='Markdown')
                except:
                    pass  # Ignora erros de edi√ß√£o (rate limit)
                
                # Verifica duplicatas
                try:
                    # Tentar usar a fun√ß√£o j√° importada
                    if is_duplicate_download(search_term):
                        skipped_duplicates += 1
                except NameError:
                    # Fallback: tentar importar a fun√ß√£o
                    try:
                        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
                        from cli.main import is_duplicate_download
                    except ImportError:
                        # √öltimo recurso: importar do arquivo antigo
                        import importlib.util
                        root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
                        module_path = os.path.join(root_dir, 'slskd-mp3-search.py')
                        if not os.path.exists(module_path):
                            raise ImportError(f"N√£o foi poss√≠vel encontrar o m√≥dulo principal")
                        
                        spec = importlib.util.spec_from_file_location("slskd_mp3_search", module_path)
                        slskd_module = importlib.util.module_from_spec(spec)
                        sys.modules["slskd_mp3_search"] = slskd_module
                        spec.loader.exec_module(slskd_module)
                        is_duplicate_download = slskd_module.is_duplicate_download
                    
                    # Verificar duplicatas com a fun√ß√£o importada
                    if is_duplicate_download(search_term):
                    skipped_duplicates += 1
                    
                    # Remove da playlist se j√° foi baixada
                    if remove_from_playlist and self.spotify_user_client:
                        # Importar a fun√ß√£o remove_track_from_playlist de forma segura
                        try:
                            # Tentar importar do m√≥dulo CLI primeiro
                            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'cli'))
                            from main import remove_track_from_playlist
                            logger.info("‚úÖ Fun√ß√£o remove_track_from_playlist importada do m√≥dulo cli.main")
                        except ImportError as e:
                            logger.warning(f"N√£o foi poss√≠vel importar remove_track_from_playlist do m√≥dulo cli.main: {e}")
                            
                            # Fallback para o arquivo antigo slskd-mp3-search.py
                            try:
                                # Procurar o arquivo no diret√≥rio raiz
                                root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
                                module_path = os.path.join(root_dir, 'slskd-mp3-search.py')
                                
                                if not os.path.exists(module_path):
                                    # Tentar encontrar em outros locais comuns
                                    possible_paths = [
                                        os.path.join(root_dir, 'slskd-mp3-search.py'),
                                        os.path.join(root_dir, 'src', 'slskd-mp3-search.py'),
                                        os.path.join(root_dir, 'src', 'cli', 'main.py')
                                    ]
                                    
                                    for path in possible_paths:
                                        if os.path.exists(path):
                                            module_path = path
                                            break
                                    else:
                                        raise FileNotFoundError(f"Arquivo principal n√£o encontrado em nenhum local comum")
                                
                                import importlib.util
                                spec = importlib.util.spec_from_file_location("slskd_mp3_search", module_path)
                                slskd_module = importlib.util.module_from_spec(spec)
                                sys.modules["slskd_mp3_search"] = slskd_module
                                spec.loader.exec_module(slskd_module)
                                
                                # Importar a fun√ß√£o necess√°ria
                                remove_track_from_playlist = slskd_module.remove_track_from_playlist
                                logger.info("‚úÖ Fun√ß√£o remove_track_from_playlist importada do arquivo slskd-mp3-search.py")
                            except Exception as e:
                                logger.error(f"‚ùå Erro ao importar remove_track_from_playlist: {e}")
                                raise ImportError(f"N√£o foi poss√≠vel importar remove_track_from_playlist: {e}")
                        if remove_track_from_playlist(self.spotify_user_client, playlist_id, track['uri']):
                            removed_from_playlist_count += 1
                    continue
                
                # Tenta download de forma ass√≠ncrona
                try:
                    loop = asyncio.get_event_loop()
                    success = await loop.run_in_executor(None, smart_mp3_search, self.slskd, search_term)
                    
                    if success:
                        successful_downloads += 1
                        
                        # Remove da playlist se bem-sucedido
                        if remove_from_playlist and self.spotify_user_client:
                            from slskd_mp3_search import remove_track_from_playlist
                            if remove_track_from_playlist(self.spotify_user_client, playlist_id, track['uri']):
                                removed_from_playlist_count += 1
                    else:
                        failed_downloads += 1
                        
                except Exception:
                    failed_downloads += 1
                
                # Pausa entre downloads (cancel√°vel)
                try:
                    await asyncio.sleep(2)
                except asyncio.CancelledError:
                    raise
            
            # Relat√≥rio final
            final_text = f"üéµ **{playlist_name}** - Conclu√≠do!\n\n"
            final_text += f"üìä **Relat√≥rio Final:**\n"
            final_text += f"‚úÖ Downloads iniciados: {successful_downloads}\n"
            final_text += f"‚è≠Ô∏è Duplicatas puladas: {skipped_duplicates}\n"
            final_text += f"‚ùå Falhas: {failed_downloads}\n"
            
            if remove_from_playlist:
                final_text += f"üóëÔ∏è Removidas da playlist: {removed_from_playlist_count}\n"
            
            final_text += f"\nüí° Monitore o progresso no slskd web interface"
            
            await progress_msg.edit_text(final_text, parse_mode='Markdown')
            
        except asyncio.CancelledError:
            # Tarefa foi cancelada
            raise
        except Exception as e:
            error_text = f"‚ùå Erro durante download da playlist: {e}"
            try:
                await progress_msg.edit_text(error_text)
            except:
                pass
            
            # Relat√≥rio final
            final_text = f"üéµ **{playlist_name}** - Conclu√≠do!\n\n"
            final_text += f"üìä **Relat√≥rio Final:**\n"
            final_text += f"‚úÖ Downloads iniciados: {successful_downloads}\n"
            final_text += f"‚è≠Ô∏è Duplicatas puladas: {skipped_duplicates}\n"
            final_text += f"‚ùå Falhas: {failed_downloads}\n"
            
            if remove_from_playlist:
                final_text += f"üóëÔ∏è Removidas da playlist: {removed_from_playlist_count}\n"
            
            final_text += f"\nüí° Monitore o progresso no slskd web interface"
            
            await progress_msg.edit_text(final_text, parse_mode='Markdown')
            
        except Exception as e:
            error_text = f"‚ùå Erro durante download da playlist: {e}"
            try:
                await progress_msg.edit_text(error_text)
            except:
                pass
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manipula erros do bot"""
        logger.error(f"Erro no bot: {context.error}")
        
        # Se h√° um update, tenta responder ao usu√°rio
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå Ocorreu um erro interno. Tente novamente em alguns segundos."
                )
            except Exception as e:
                logger.error(f"Erro ao enviar mensagem de erro: {e}")
    
    def run(self):
        """Inicia o bot"""
        if not TELEGRAM_AVAILABLE:
            logger.error("python-telegram-bot n√£o est√° dispon√≠vel")
            return
        
        logger.info("ü§ñ Iniciando Telegram Bot...")
        
        # Cria aplica√ß√£o
        application = Application.builder().token(self.bot_token).build()
        
        # Adiciona handlers de comandos espec√≠ficos
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("search", self.search_command))
        application.add_handler(CommandHandler("album", self.album_command))
        application.add_handler(CommandHandler("spotify", self.spotify_command))
        application.add_handler(CommandHandler("history", self.history_command))
        application.add_handler(CommandHandler("clear_history", self.clear_history_command))
        application.add_handler(CommandHandler("tasks", self.tasks_command))
        application.add_handler(CommandHandler("info", self.info_command))
        application.add_handler(CommandHandler("lastfm_tag", self.lastfm_tag_command))
        application.add_handler(CommandHandler("lastfm_artist", self.lastfm_artist_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # Adiciona handler de erro
        application.add_error_handler(self.error_handler)
        
        # N√ÉO adiciona handler para mensagens de texto - elas ser√£o ignoradas
        
        # Inicia o bot com configura√ß√µes robustas
        logger.info("‚úÖ Bot iniciado! Pressione Ctrl+C para parar.")
        logger.info("üîá Mensagens que n√£o sejam comandos ser√£o ignoradas")
        
        try:
            application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True,
                poll_interval=1.0,
                timeout=10
            )
        except Exception as e:
            logger.error(f"Erro durante polling: {e}")
            raise


def main():
    """Fun√ß√£o principal"""
    try:
        bot = TelegramMusicBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë Bot interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
